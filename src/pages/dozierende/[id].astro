---
import DefaultLayout from '~/layouts/DefaultLayout.astro';
import Breadcrumb from "~/components/page/Breadcrumb.astro";
import MetaHead from "~/components/page/MetaHead.astro";
import SectionTextPict from "~/components/page/SectionTextPict.astro";
import loadJson from '~/lib/loadJson.js';
import fetchWikipediaLinks from '~/lib/wikidataWikipediaLinks.js';
import fetchWikipediaImage from '~/lib/wikipediaArticleImage.js';

// Helper
function getWikipediaTitle(url) {
  const m = url.match(/\/wiki\/(.+)$/);
  return m ? decodeURIComponent(m[1]) : null;
}

export async function getStaticPaths() {
  const dozenten = await loadJson('/data/tbl_dozenten.json');
  const veranstaltungen1 = await loadJson('/data/tbl_veranstaltungen.json');
  const veranstaltungen2 = await loadJson('/data/tbl_veranstaltungen-ab-1900w.json');
  const veranstaltungen = [...veranstaltungen1, ...veranstaltungen2];

  return dozenten.map((dozent) => {
    const veranstaltungen_dozent = veranstaltungen.filter(
      (v) =>
        Array.isArray(v.dozenten) &&
        v.dozenten.some((d) => d.id_dozent === dozent.id_dozent)
    );

    return {
      params: { id: dozent.id_dozent },
      props: {
        dozent,
        veranstaltungen_dozent,
      }
    };
  });
}

// Semester-Format-Helfer
function formatSemesterLabel(id_semester) {
  if (!id_semester || id_semester.length < 5) return id_semester;
  const jahr = id_semester.slice(0, 4);
  const typ = id_semester[4].toLowerCase();
  return typ === "w" ? `${jahr} WS` : typ === "s" ? `${jahr} SS` : id_semester;
}

const { dozent, veranstaltungen_dozent } = Astro.props;

// Initialisiere alle Ausgabewerte
let wikipediaDe = null;
let wikipediaEn = null;
let wikidataLink = null;
let wikipediaImage = null;

// Fall 1: Kein wikidata, kein wikipedia → nichts anzeigen
if (!dozent.wikidata && !dozent.wikipedia) {
  // Alles bleibt null
}

// Fall 2: Nur wikipedia vorhanden (DE-Link)
else if (!dozent.wikidata && dozent.wikipedia) {
  wikipediaDe = dozent.wikipedia;
  // Bild laden (nur wenn Wikipedia-Link DE da)
  wikipediaImage = await fetchWikipediaImage("de", getWikipediaTitle(wikipediaDe), 300);
}

// Fall 3 + 4: wikidata vorhanden, egal ob wikipedia vorhanden
else if (dozent.wikidata) {
  const links = await fetchWikipediaLinks(dozent.wikidata);
  wikipediaDe = links.de || null;
  wikipediaEn = links.en || null;
  wikidataLink = `https://www.wikidata.org/wiki/${dozent.wikidata}`;
  // Überschreibe bestehenden Wikipedia-Link (de), falls vorhanden (deine Vorgabe)
  // Also: immer Wikidata-Links nutzen, auch wenn in JSON schon DE-Link da ist!
  // Bild laden – DE bevorzugt, sonst EN
  if (wikipediaDe) {
    wikipediaImage = await fetchWikipediaImage("de", getWikipediaTitle(wikipediaDe), 300);
  } else if (wikipediaEn) {
    wikipediaImage = await fetchWikipediaImage("en", getWikipediaTitle(wikipediaEn), 300);
  }
}

// breadcrumb
const breadcrumb = [
  { label: "Home", href: "/" },
  { label: "Dozierende", href: "/dozierende/" },
  { label: `${dozent.nachname}, ${dozent.vorname}`, href: `/dozierende/${dozent.id_dozent}/` }
];

const website_title = "Historische Vorlesungsverzeichnisse der Universität Zürich";
const page_title = `${dozent.nachname}, ${dozent.vorname}`;
const website_byline = "1833 - 1900";
const website_description = "Detailangaben zum Dozenten / zur Dozentin.";
---


<DefaultLayout>
  <Breadcrumb items={breadcrumb} />

  <MetaHead slot="head"
    title={`${dozent.nachname}, ${dozent.vorname} | ${website_title} ${website_byline}`}
    description={`${website_description}`}
  />

  <SectionTextPict>
  
    {wikipediaImage && (
      <img class="wiki-image"
        src={wikipediaImage}
        alt={`Bild aus Wikipedia`}
      />
    )}
    
    <h1>{dozent.nachname}, {dozent.vorname}</h1>
    
    <p>
      {dozent.geboren && (
        <>
          <span><span style="width:18px;display:inline-block;">&#10025;</span>{dozent.geboren}</span>
          {dozent.gestorben && (
            <>
              <span style="margin-left:30px;display:inline-block;"><span style="width:18px;display:inline-block;">&dagger;</span>{dozent.gestorben}</span>
            </>
          )}
        </>
      )}
      {!dozent.geboren && dozent.gestorben && (
        <>
          <span><span style="width:18px;display:inline-block;">&dagger;</span>{dozent.gestorben}</span>
        </>
      )}
    </p>

    {dozent.gagliardi && <p>{dozent.gagliardi}</p>}
    {dozent.fak && <p>{dozent.fak}</p>}
    {dozent.fachgebiet && <p>Fachgebiet: {dozent.fachgebiet}</p>}
    {(dozent.habilitation || dozent.berufung) && (
      <p>
        {[dozent.habilitation, dozent.berufung].filter(Boolean).join(', ')}
      </p>
    )}
    {dozent.dekanat && <p>{dozent.dekanat}</p>}
    {dozent.rektor && <p>{dozent.rektor}</p>}

    {(dozent.pnd || wikipediaDe || wikipediaEn || wikidataLink || (dozent.url && dozent.url.length > 0)) && (
      <p>
        {[
          dozent.pnd && <a class="Link" href={`https://d-nb.info/gnd/${dozent.pnd}`}>GND</a>,
          wikipediaDe && <a class="Link" href={wikipediaDe} target="_blank" rel="noopener">Wikipedia (DE)</a>,
          wikipediaEn && <a class="Link" href={wikipediaEn} target="_blank" rel="noopener">Wikipedia (EN)</a>,
          wikidataLink && <a class="Link" href={wikidataLink} target="_blank" rel="noopener">Wikidata</a>,
          ...(Array.isArray(dozent.url) ? dozent.url.map((u, i) =>
            <a class="Link" href={u} target="_blank" rel="noopener">{u}</a>
          ) : [])
        ]
          // Filtere alle leeren/null Einträge raus
          .filter(Boolean)
          // Mit <br/> dazwischen ausgeben
          .map((elem, i, arr) => (
            <>
              {elem}
              {i < arr.length - 1 && <br />}
            </>
          ))}
      </p>
    )}

    <h2>Veranstaltungen</h2>
    <table class="tablesorter">
      <thead>
        <tr>
          <th>#</th>
          <th>Semester</th>
          <th>Veranstaltung</th>
          <th>Grad</th>
          <th>Funktion</th>
        </tr>
      </thead>
      <tbody>
        {veranstaltungen_dozent.map((v, index) => {
          // Alle passenden Dozenten für diese Veranstaltung und diesen Dozenten
          const meineInfos = (Array.isArray(v.dozenten) ? v.dozenten : []).filter(d => d.id_dozent === dozent.id_dozent);
          return (
            <tr>
              <td>{index + 1}</td>
              <td>
                <a href={`/vv/${v.id_semester}#${v.id_veranstaltung}`}>{formatSemesterLabel(v.id_semester)}</a>              </td>
              <td>{v.thema}</td>
              <td>
                {meineInfos.map((d, i) => (
                  <>
                    {i > 0 && ', '}
                    {d.grad || ''}
                  </>
                ))}
              </td>
              <td>
                {meineInfos.map((d, i) => (
                  <>
                    {i > 0 && ', '}
                    {d.funktion || ''}
                  </>
                ))}
              </td>
            </tr>
          )
        })}
      </tbody>
    </table>
  </SectionTextPict>
</DefaultLayout>
