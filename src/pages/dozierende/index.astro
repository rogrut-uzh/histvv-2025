---
export const prerender = false;

import DefaultLayout from '~/layouts/DefaultLayout.astro';
import Breadcrumb from "~/components/page/Breadcrumb.astro";
import MetaHead from "~/components/page/MetaHead.astro";
import SectionTextPict from "~/components/page/SectionTextPict.astro";
import { pageinfo } from '~/constants.ts';
import { esSearch } from '~/server/es';

const page_title = "Dozierende";

// Dozierende laden (체ber esSearch) und sortieren
let dozierende: any[] = [];
let esError = ''; // <-- Fehlertext f체r Anzeige/Log
try {
  const { hits } = await esSearch({
    query: {
      bool: {
        filter: [{ term: { typ: 'dozent' } }],
        must_not: [{ term: { id: 'vakant' } }]
      }
    },
    size: 10000,
    _source: ['id','nachname','vorname','geboren','gestorben','fak','berufung']
  });

  const collator = new Intl.Collator('de', { sensitivity: 'base' });
  dozierende = (hits?.hits ?? [])
    .map((h: any) => h._source)
    .sort((a: any, b: any) =>
      collator.compare(a.nachname || '', b.nachname || '') ||
      collator.compare(a.vorname || '', b.vorname || '')
    );
} catch (e) {
  esError = String(e);
  console.error('[dozierende] ES-Fehler:', e); // <-- im Server-Log sehen
  // Keine Response mit 502 zur체ckgeben -> Seite rendert weiter
}

const breadcrumb = [
  { label: "Home", href: "/" },
  { label: "Dozierende", href: "/dozierende/" }
];
---

<DefaultLayout>
  <Breadcrumb items={breadcrumb} />

  <MetaHead slot="head"
    title={`${page_title} | ${pageinfo.title}`}
    description={`${pageinfo.description}`}
    matomo_tracking_id={`${pageinfo.matomo_tracking_id}`}
  />

  <SectionTextPict>
    <h1>{page_title}</h1>

    <h3>Filter nach Nachname</h3>
    <div id="abc-filter">
      {Array.from({ length: 26 }, (_, i) => String.fromCharCode(65 + i)).map(buchstabe => (
        <button type="button" class="abc-btn" data-buchstabe={buchstabe}>{buchstabe}</button>
      ))}
    </div>
    <button type="button" id="abc-reset">Filter aufheben</button>

    <table class="tablesorter tab_doz">
      <thead>
        <tr>
          <th>Nachname, Vorname</th>
          <th>Geboren</th>
          <th>Gestorben</th>
          <th>Fakult채t</th>
          <th>Berufung</th>
        </tr>
      </thead>
      <tbody>
        {dozierende.map((d:any) => (
          <tr key={d.id}>
            <td>
              <a href={`/dozierende/${d.id}/`}>
                {d.nachname}{d.vorname ? `, ${d.vorname}` : ''}
              </a>
            </td>
            <td>{d.geboren || ""}</td>
            <td>{d.gestorben || ""}</td>
            <td>{d.fak || ""}</td>
            <td>{d.berufung || ""}</td>
          </tr>
        ))}
      </tbody>
    </table>
  </SectionTextPict>

  <script is:inline>
    document.addEventListener('DOMContentLoaded', function () {
      const buttons = document.querySelectorAll('.abc-btn');
      const reset = document.getElementById('abc-reset');

      function getRows() {
        return document.querySelectorAll('table tbody tr');
      }

      function filterRows(letter) {
        getRows().forEach(row => {
          const link = row.querySelector('td a');
          if (link) {
            const text = link.textContent.trim().toUpperCase();
            row.style.display = text.startsWith(letter) ? '' : 'none';
          }
        });
        buttons.forEach(btn => {
          btn.classList.toggle('is-active', btn.dataset.buchstabe === letter);
        });
        reset.classList.remove('is-active');
      }

      function resetRows() {
        getRows().forEach(row => row.style.display = '');
        buttons.forEach(btn => btn.classList.remove('is-active'));
        reset.classList.add('is-active');
      }

      buttons.forEach(btn => {
        btn.addEventListener('click', function () {
          filterRows(this.dataset.buchstabe);
        });
      });

      reset.addEventListener('click', resetRows);
    });
  </script>
</DefaultLayout>
