---
export const prerender = false;

import DefaultLayout from '~/layouts/DefaultLayout.astro';
import Breadcrumb from "~/components/page/Breadcrumb.astro";
import MetaHead from "~/components/page/MetaHead.astro";
import SectionTextPict from "~/components/page/SectionTextPict.astro";
import { pageinfo } from '~/constants.ts';

const page_title = "Vorlesungsverzeichnisse";

const ES = process.env.ELASTICSEARCH_URL || 'http://elasticsearch:9200';

// Semester-Titel bauen (SS/WS + Jahr)
function semesterTitel(id) {
  if (!id) return '';
  const year = id.slice(0, 4);
  const typ  = id[4]?.toLowerCase() === 's' ? 'Sommersemester' : 'Wintersemester';
  return `${typ} ${year}`;
}
function decadeLabel(id) {
  const year = id.slice(0, 4);
  return `${year.slice(0, 3)}0–${year.slice(0, 3)}9`;
}

// 1) Nur Aggregation (keine Treffer-Dokumente)
const body = {
  query: { bool: { filter: [ { term: { typ: 'veranstaltung' } } ] } },
  size: 0,
  aggs: {
    semesters: {
      terms: {
        field: "id_semester",
        size: 2000,           // reicht locker für alle Semester
        order: { _key: "asc"} // sortiere nach Schlüssel (1910s, 1910w, …)
      }
    }
  }
};

const res = await fetch(`${ES}/histvv/_search`, {
  method: 'POST',
  headers: { 'Content-Type': 'application/json' },
  body: JSON.stringify(body)
});
if (!res.ok) {
  const txt = await res.text().catch(() => '');
  return new Response(`Suche nicht erreichbar: ${res.status} ${txt}`, { status: 502 });
}

const json = await res.json();
const buckets = json.aggregations?.semesters?.buckets ?? [];

// 2) Liste der Semester + Counts
const semesters = buckets.map(b => ({
  id_semester: String(b.key).toLowerCase(),
  titel: semesterTitel(String(b.key)),
  count: b.doc_count
}));

// 3) Nach Jahrzehnt gruppieren
const groupedByDecade = {};
for (const s of semesters) {
  const dec = decadeLabel(s.id_semester);
  (groupedByDecade[dec] ??= []).push(s);
}
const decades = Object.keys(groupedByDecade).sort(); // aufsteigend
// für neueste zuerst → .sort().reverse()
// const decades = Object.keys(groupedByDecade).sort().reverse();

const breadcrumb = [
  { label: "Home", href: "/" },
  { label: "Vorlesungsverzeichnisse", href: "/vv/" }
];
---

<DefaultLayout>
  <Breadcrumb items={breadcrumb} />

  <MetaHead slot="head"
    title={`${page_title} | ${pageinfo.title} ${pageinfo.byline}`}
    description={`${pageinfo.description}`}
  />

  <SectionTextPict>
    <h1>{page_title}</h1>

    {decades.length === 0 ? (
      <p>Keine Semester gefunden.</p>
    ) : (
      <div>
        {decades.map((decade, i) => {
          // Map: { [Jahr]: { s: {...}, w: {...} } }
          const byYear = {};
          groupedByDecade[decade].forEach((s) => {
            const year    = s.id_semester.slice(0, 4);
            const semType = s.id_semester[4].toLowerCase(); // 's' oder 'w'
            (byYear[year] ??= {});
            byYear[year][semType] = s;
          });

          const yearsSorted = Object.keys(byYear).sort(); // aufsteigend

          return (
            <>
              <h3 class={`toggle${i === 0 ? " is-open" : ""}`}>{decade}</h3>
              <div>
                <div class="l-Flex gap-none gutter-small">
                  {yearsSorted.map((year) => (
                    <>
                      {/* Sommersemester zuerst, falls vorhanden */}
                      {byYear[year].s && (
                        <div class="l-1of2">
                          <a href={`/vv/${byYear[year].s.id_semester}/`} class="Link">
                            {byYear[year].s.titel}
                          </a>
                          <span style="color:#666; font-size:.8em;">
                            {' '}({byYear[year].s.count})
                          </span>
                        </div>
                      )}
                      {/* Dann Wintersemester, falls vorhanden */}
                      {byYear[year].w && (
                        <div class="l-1of2">
                          <a href={`/vv/${byYear[year].w.id_semester}/`} class="Link">
                            {byYear[year].w.titel}
                          </a>
                          <span style="color:#666; font-size:.8em;">
                            {' '}({byYear[year].w.count})
                          </span>
                        </div>
                      )}
                    </>
                  ))}
                </div>
              </div>
            </>
          );
        })}
      </div>
    )}
  </SectionTextPict>
</DefaultLayout>
