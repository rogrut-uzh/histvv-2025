---
import DefaultLayout from '~/layouts/DefaultLayout.astro';
import Breadcrumb from "~/components/page/Breadcrumb.astro";
import MetaHead from "~/components/page/MetaHead.astro";
import SectionIntro from "~/components/page/SectionIntro.astro";
import SectionTextPict from "~/components/page/SectionTextPict.astro";
import loadJson from '~/lib/loadJson.js';

import { pageinfo } from '~/constants.ts';
const page_title = "Vorlesungsverzeichnisse";

const veranstaltungen = await loadJson('/data/tbl_veranstaltungen-merged.json');
//const veranstaltungen1 = await loadJson('/data/tbl_veranstaltungen.json');
//const veranstaltungen2 = await loadJson('/data/tbl_veranstaltungen-ab-1900w.json');
//const veranstaltungen = [...veranstaltungen1, ...veranstaltungen2];

// 1. Alle Semester-IDs extrahieren & sortieren
let semesterIDs = veranstaltungen
  .map(v => v.id_semester?.trim())
  .filter(Boolean);

// Optional: Duplikate entfernen, falls vorhanden
semesterIDs = Array.from(new Set(semesterIDs));

// 2. Semester-Titel bauen (SS/WS + Jahr)
function semesterTitel(id) {
  if (!id) return '';
  const year = id.slice(0, 4);
  const typ = id.endsWith('s') ? 'Sommersemester' : 'Wintersemester';
  return `${typ} ${year}`;
}

// 3. Sortieren (neuste zuerst, falls gewünscht: umdrehen)
semesterIDs.sort((a, b) => a.localeCompare(b)); // Ändere ggf. Reihenfolge

// 4. Nach Jahrzehnt gruppieren
const groupedByDecade = {};
for (const id of semesterIDs) {
  const decade = id.slice(0, 3) + "0–" + id.slice(0, 3) + "9";
  if (!groupedByDecade[decade]) groupedByDecade[decade] = [];
  groupedByDecade[decade].push({ id_semester: id, titel: semesterTitel(id) });
}
const decades = Object.keys(groupedByDecade).sort(); // Sortiert Jahrzehnte

// 5. Veranstaltungen pro Semester zählen
const veranstaltungenCount = {};
for (const v of veranstaltungen) {
  if (!veranstaltungenCount[v.id_semester]) veranstaltungenCount[v.id_semester] = 0;
  veranstaltungenCount[v.id_semester]++;
}

const breadcrumb = [
  { label: "Home", href: "/" },
  { label: "Vorlesungsverzeichnisse", href: "/vv/" }
];
---

<DefaultLayout>
    <Breadcrumb items={breadcrumb} />
    
    <MetaHead slot="head"
        title={`${page_title} | ${pageinfo.title} ${pageinfo.byline}`}
        description={`${pageinfo.description}`}
    />
    
    <SectionTextPict>
      <h1>{page_title}</h1>
      
      <div>
        {decades.map((decade, i) => {
          // Map: { [Jahr]: { s: {...}, w: {...} } }
          const byYear = {};
          groupedByDecade[decade].forEach((s) => {
            const year = s.id_semester.slice(0, 4);
            const semType = s.id_semester[4].toLowerCase(); // 's' oder 'w'
            if (!byYear[year]) byYear[year] = {};
            byYear[year][semType] = s;
          });

          // Jetzt gibt's für jedes Jahr die vorhandenen Semester
          return (
            <>
              <h3 class={`toggle${i === 0 ? " is-open" : ""}`}>{decade}</h3>
              <div>
                  <div class="l-Flex gap-none gutter-small">
                    {Object.keys(byYear).sort().map((year) => (
                      // Gib ein Fragment für jede Jahres-Zeile zurück:
                      <>
                        {/* Sommersemester zuerst, falls vorhanden */}
                        {byYear[year].s && (
                          <div class="l-1of2">
                            <a href={`/vv/${byYear[year].s.id_semester}/`} class="Link">{byYear[year].s.titel}</a>
                            <span style="color: #666; font-size: 0.8em;"> ({veranstaltungenCount[byYear[year].s.id_semester] || 0})</span>
                          </div>
                        )}
                        {/* Dann Wintersemester, falls vorhanden */}
                        {byYear[year].w && (
                          <div class="l-1of2">
                            <a href={`/vv/${byYear[year].w.id_semester}/`} class="Link">{byYear[year].w.titel}</a>
                            <span style="color: #666; font-size: 0.8em;"> ({veranstaltungenCount[byYear[year].w.id_semester] || 0})</span>
                          </div>
                        )}
                      </>
                    ))}
                  </div>
              </div>
            </>
          );
        })}
      </div>
    </SectionTextPict>

</DefaultLayout>
