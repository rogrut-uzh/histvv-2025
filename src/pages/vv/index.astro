---
import DefaultLayout from '~/layouts/DefaultLayout.astro';
import Breadcrumb from "~/components/page/Breadcrumb.astro";
import MetaHead from "~/components/page/MetaHead.astro";
import SectionIntro from "~/components/page/SectionIntro.astro";
import SectionMasonry from "~/components/page/SectionMasonry.astro";
import loadJson from '~/lib/loadJson.js';

const website_title = "Historische Vorlesungsverzeichnisse der Universität Zürich"
const page_title = "Vorlesungsverzeichnisse"
const website_byline = "1833 - 1900"
const website_description = " "

// Lade alle Semester, filtere und sortiere absteigend
const semester = (await loadJson('/data/tbl_semester_header.json'))
  .filter((s) => s.id_semester?.trim() !== '')
  .sort((a, b) => b.id_semester.localeCompare(a.id_semester));

// Gruppiere nach Jahrzehnt
const groupedByDecade = semester.reduce((acc, s) => {
  const year = parseInt(s.id_semester.slice(0, 4), 10);
  const decade = Math.floor(year / 10) * 10;
  const label = `${decade}s`;
  if (!acc[label]) acc[label] = [];
  acc[label].push(s);
  return acc;
}, {});

// Sortiere die Jahrzehnte absteigend (neuestes zuerst)
const decades = Object.keys(groupedByDecade)
  .sort((a, b) => parseInt(b) - parseInt(a));

// Lade Veranstaltungen (aus JSON!)
const veranstaltungen = await loadJson('/data/tbl_veranstaltungen.json');

// Zähle Veranstaltungen pro Semester
const veranstaltungenCount = veranstaltungen.reduce((acc, v) => {
  const id = v.id_semester;
  if (!acc[id]) acc[id] = 0;
  acc[id]++;
  return acc;
}, {});

const breadcrumb = [
  { label: "Home", href: "/" },
  { label: "Vorlesungsverzeichnisse", href: "/vv/" }
];
---

<DefaultLayout>
    <Breadcrumb items={breadcrumb} />

    <MetaHead slot="head"
        title={`${page_title} | ${website_title} ${website_byline}`}
        description={`${website_description}`}
    />

    <SectionIntro>{`${page_title}`}</SectionIntro>
    
    <SectionMasonry>
      {decades.map((decade) => (
        <div class="MasonryGrid--item js-MasonryGrid--item">
          <div class="Teaser">
            <div class="Teaser--inner">
              <div class="Teaser--header">
                <h3 class="Teaser--title">{decade}</h3>
              </div>
              <div class="Teaser--body">
                {groupedByDecade[decade].map((s) => (
                  <div>
                    <a href={`/vv/${s.id_semester}/`} class="Link">
                      {s.titel}
                    </a>
                    <span style="color: #666; font-size: 0.9em;"> ({veranstaltungenCount[s.id_semester] || 0})</span>
                  </div>
                ))}
              </div>
            </div>
          </div>
        </div>
      ))}
    </SectionMasonry>
</DefaultLayout>
