---
export const prerender = false;

import DefaultLayout from '~/layouts/DefaultLayout.astro';
import Breadcrumb from "~/components/page/Breadcrumb.astro";
import MetaHead from "~/components/page/MetaHead.astro";
import SectionTextPict from "~/components/page/SectionTextPict.astro";
import { pageinfo } from '~/constants.ts';
import { groupByDecade, semesterLabel, compareSemester, isValidSemesterId } from '~/lib/semester';
import { esSearch } from '~/server/es';

const page_title = "Vorlesungsverzeichnisse";

// Alle Semester-IDs per Aggregation via esSearch()
let buckets: Array<{ key: string; doc_count: number }> = [];
try {
  const { aggregations } = await esSearch({
    query: { term: { typ: 'veranstaltung' } },
    size: 0,
    aggs: {
      semesters: { terms: { field: 'id_semester', size: 20000, order: { _key: 'asc' } } }
    }
  });
  buckets = (aggregations?.semesters?.buckets ?? []) as typeof buckets;
} catch (e) {
  return new Response('Suche nicht erreichbar', { status: 502 });
}

const semesterIDs = buckets
  .map(b => String(b.key))
  .filter(isValidSemesterId)
  .sort(compareSemester);

if (!semesterIDs.length) {
  return new Response('Keine Semester gefunden.', { status: 404 });
}

const veranstaltungenCount: Record<string, number> =
  Object.fromEntries(buckets.map(b => [String(b.key), Number(b.doc_count)]));

// Gruppierung nach Jahrzehnt
const groupedByDecade = groupByDecade(semesterIDs);
const decades = Object.keys(groupedByDecade).sort();

function buildByYear(ids: string[]) {
  const byYear: Record<string, { s?: string; w?: string }> = {};
  for (const id of ids) {
    const year = id.slice(0, 4);
    const t = id[4].toLowerCase() as 's' | 'w';
    (byYear[year] ??= {} as any)[t] = id;
  }
  return byYear;
}

const breadcrumb = [
  { label: "Home", href: "/" },
  { label: "Vorlesungsverzeichnisse", href: "/vv/" }
];
---

<DefaultLayout>
  <Breadcrumb items={breadcrumb} />
  <MetaHead slot="head"
    title={`${page_title} | ${pageinfo.title} ${pageinfo.byline}`}
    description={`${pageinfo.description}`}
  />

  <SectionTextPict>
    <h1>{page_title}</h1>

    <div>
      {decades.map((decade, i) => {
        const byYear = buildByYear(groupedByDecade[decade] || []);
        return (
          <>
            <h3 class={`toggle${i === 0 ? " is-open" : ""}`}>{decade}</h3>
            <div>
              <div class="l-Flex gap-none gutter-small">
                {Object.keys(byYear).sort().map((year) => (
                  <>
                    {byYear[year].s && (
                      <div class="l-1of2">
                        <a href={`/vv/${byYear[year].s}/`} class="Link">{semesterLabel(byYear[year].s)}</a>
                        <span style="color: #666; font-size: 0.8em;"> ({veranstaltungenCount[byYear[year].s] || 0})</span>
                      </div>
                    )}
                    {byYear[year].w && (
                      <div class="l-1of2">
                        <a href={`/vv/${byYear[year].w}/`} class="Link">{semesterLabel(byYear[year].w)}</a>
                        <span style="color: #666; font-size: 0.8em;"> ({veranstaltungenCount[byYear[year].w] || 0})</span>
                      </div>
                    )}
                  </>
                ))}
              </div>
            </div>
          </>
        );
      })}
    </div>
  </SectionTextPict>
</DefaultLayout>
