---
export const prerender = false;

import DefaultLayout from '~/layouts/DefaultLayout.astro';
import Breadcrumb from "~/components/page/Breadcrumb.astro";
import MetaHead from "~/components/page/MetaHead.astro";
import SectionTextPict from "~/components/page/SectionTextPict.astro";
import slugify from '~/lib/slugify.js';
import { pageinfo } from '~/constants.ts';
import { isValidSemesterId, normalizeSemesterId, semesterLabel } from '~/lib/semester';
import { sortFakultaeten } from '~/lib/fakultaet';
import { esSearch } from '~/server/es';

const page_title = "Vorlesungsverzeichnisse";
const zeit_trenner = " - ";

// Semester-ID prüfen
const raw = String(Astro.params.id ?? '').trim();
if (!isValidSemesterId(raw)) {
  return new Response('Semester-ID ungültig (z.B. 1910s/1910w)', { status: 404 });
}
const semesterId = normalizeSemesterId(raw);
const sem = { id_semester: semesterId, titel: semesterLabel(semesterId) };

// Daten laden (über esSearch)
let items: any[] = [];
try {
  const { hits } = await esSearch({
    query: { bool: { filter: [ { term: { typ: 'veranstaltung' } }, { term: { id_semester: semesterId } } ] } },
    size: 5000,
    _source: [
      'id_veranstaltung','typ','fak','thema','id_semester',
      'vorlesungsnummer','thema_anmerkung','zusatz','zeit','wochenstunden','ort','dozenten',
      'site_url','url'
    ]
  });
  const collator = new Intl.Collator('de', { sensitivity: 'base' });
  items = (hits?.hits ?? []).map((h: any) => h._source)
    .sort((a: any, b: any) =>
      collator.compare(String(a.fak || ''),   String(b.fak || '')) ||
      collator.compare(String(a.thema || ''), String(b.thema || ''))
    );

} catch (e) {
  return new Response('Suche nicht erreichbar', { status: 502 });
}
if (!items.length) return new Response(`Kein Eintrag für ${sem.titel}`, { status: 404 });

// Gruppieren
const byFak = items.reduce((acc: any, v: any) => {
  const fak = v?.fak || 'Unbekannte Fakultät';
  (acc[fak] ??= []).push(v);
  return acc;
}, {});
const sortedFakultaetNamen = sortFakultaeten(Object.keys(byFak));

// Anchor-ID
function anchorFrom(v: any) {
  const direct = (v?.id_veranstaltung ?? v?.id ?? '').toString().trim();
  if (direct) return direct;
  const u = (v?.site_url || v?.url || '').toString();
  if (u.includes('#')) return u.split('#').pop()!;
  return '';
}

const breadcrumb = [
  { label: "Home", href: "/" },
  { label: "Vorlesungsverzeichnisse", href: "/vv/" },
  { label: sem.titel, href: `/vv/${sem.id_semester}/` }
];
---

<DefaultLayout>
  <Breadcrumb items={breadcrumb} />
  <MetaHead slot="head"
    title={`${page_title} | ${pageinfo.title} ${pageinfo.byline}`}
    description={`${pageinfo.description}`}
  />

  <SectionTextPict>
    <h1>{sem.titel}</h1>

    <div>
      {sortedFakultaetNamen.map((fakname) => (
        <div class="vv-detail-fak">
          <a class="Link layout-standalone icon-position-before icon-orientation-down" href={`#${slugify(fakname)}`}>
            {fakname}
            <span class="Link--icon">
              <span class="Icon" data-name="16--link-internal">
                <svg><use xlink:href="#16--link-internal"></use></svg>
              </span>
            </span>
          </a>
        </div>
      ))}
    </div>

    {sortedFakultaetNamen.map((fakname, i) => (
      <section id={slugify(fakname)}>
        <h2>{fakname}</h2>

        {(byFak[fakname] || []).map((v: any, idx: number) => (
          <p id={anchorFrom(v)} key={`${fakname}-${idx}`}>
            {v.vorlesungsnummer ?? ''}

            {Array.isArray(v.dozenten) && v.dozenten.length > 0 ? (
              v.dozenten.map((d: any, i2: number) => (
                <span key={`${d.id_dozent ?? i2}`}>
                  {i2 > 0 && ', '}
                  <a class="Link" href={`/dozierende/${d.id_dozent ?? 'unbekannt'}`}>
                    {d.nachname ?? 'N.N.'}{d.vorname ? `, ${d.vorname}` : ''}
                  </a>
                  {(d.grad || d.funktion) && (
                    <span style="color:#888;">
                      ({[d.grad, d.funktion].filter(Boolean).join(", ")})
                    </span>
                  )}
                </span>
              ))
            ) : (<></>)}

            <br />
            <strong>{v.thema}</strong><br />
            {v.thema_anmerkung && <>Anmerkung: {v.thema_anmerkung}<br /></>}
            {v.zusatz && <>{v.zusatz}<br /></>}
            {v.zeit}
            {v.zeit && v.wochenstunden && zeit_trenner}
            {v.wochenstunden && `St ${v.wochenstunden}`}
            {v.ort && ` (${v.ort})`}
          </p>
        ))}

        {i !== sortedFakultaetNamen.length - 1 && (
          <div class="TextImage--topLink inline-toplink">
            <a class="Link layout-standalone size-copy-xs icon-orientation-up" href="#top">
              Top
              <span class="Link--icon">
                <span class="Icon" data-name="16--link-internal">
                  <svg><use xlink:href="#16--link-internal"></use></svg>
                </span>
              </span>
            </a>
          </div>
        )}
      </section>
    ))}
  </SectionTextPict>
</DefaultLayout>
